---
swagger: "2.0"
info:
  description: "Seed storm API"
  version: "1.0.0"
  title: "SeedStorm API"
host: "api.seedstorm.io"
basePath: "/v1"
tags:
- name: "payment"
  description: "Payment processing"
- name: "user"
  description: "Operations about user authentication"
- name: "node"
  description: "Node provisioning"
- name: "supported-coins"
  description: "List of supported coins"
schemes:
- "https"
- "http"
paths:
  /supportedCoins:
    get:
      tags:
      - "supported-coins"
      summary: "Supported crypto currencies"
      description: ""
      operationId: "getSupportedCurrencies"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CoinResponse"
        500:
          description: "Server error"
      x-swagger-router-controller: "SupportedCoins"
  /node:
    get:
      tags:
      - "node"
      summary: "Get nodes"
      description: ""
      operationId: "getNodes"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NodeResponse"
        500:
          description: "Server error"
      security:
      - api_key: []
      x-swagger-router-controller: "Node"
    post:
      tags:
      - "node"
      summary: "Create node"
      description: ""
      operationId: "createNode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Node body"
        required: true
        schema:
          $ref: "#/definitions/Node"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        405:
          description: "Invalid input"
      security:
      - api_key: []
      x-swagger-router-controller: "Node"
  /node/{nodeId}:
    get:
      tags:
      - "node"
      summary: "Get node by id"
      description: "Returns a single node"
      operationId: "getNodeById"
      produces:
      - "application/json"
      parameters:
      - name: "nodeId"
        in: "path"
        description: "ID of node to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/NodeResponse"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Node not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Node"
    put:
      tags:
      - "node"
      summary: "Update node"
      description: ""
      operationId: "updateNode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nodeId"
        in: "path"
        description: "ID of node to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Node body"
        required: true
        schema:
          $ref: "#/definitions/Node"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Node not found"
        405:
          description: "Validation exception"
      security:
      - api_key: []
      x-swagger-router-controller: "Node"
  /node/{nodeId}/stop:
    post:
      tags:
      - "node"
      summary: "Stop node"
      description: ""
      operationId: "stopNode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nodeId"
        in: "path"
        description: "ID of node to stop"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Node body"
        required: true
        schema:
          $ref: "#/definitions/Node"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - api_key: []
      x-swagger-router-controller: "Node"
  /payment:
    post:
      tags:
      - "payment"
      summary: "Process payment"
      description: ""
      operationId: "processPayment"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Payment details"
        required: true
        schema:
          $ref: "#/definitions/Payment"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid Order"
      security:
      - api_key: []
      x-swagger-router-controller: "Payment"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      security:
      - api_key: []
      x-swagger-router-controller: "User"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Login user object"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
      security:
      - api_key: []
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      security:
      - api_key: []
      x-swagger-router-controller: "User"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
      - api_key: []
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
  /user/delete:
    post:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object to be deleted"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
      - api_key: []
      x-swagger-router-controller: "User"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
  Login:
    type: "object"
    required:
    - "password"
    - "username"
    properties:
      username:
        type: "string"
        example: "username"
      password:
        type: "string"
        example: "password"
  Node:
    type: "object"
    description: "JSON object of the Node"
  NodeResponse:
    type: "object"
    description: "JSON object for the Node Response"
  CoinResponse:
    type: "object"
    description: "JSON object for the Coin Response"
  Payment:
    type: "object"
    description: "JSON object for the Payment"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
    example:
      code: 0
      type: "type"
      message: "message"
